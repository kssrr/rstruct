library(rstruct)
library(r2r)
library(microbenchmark)
library(ggplot2)
# Benchmarks
# parameters
n <- 1e5
keys <- sprintf("key%05d", seq_len(n))
values <- rnorm(n)
# Prepare named list
lst <- setNames(as.list(values), keys)
# Prepare HashMap
hm <- rstruct::hashmap(lst)
hm
print(hm)
print.Rcpp_rstruct_hashmap(hm)
library(rstruct)
library(r2r)
library(microbenchmark)
library(ggplot2)
# Benchmarks
# parameters
n <- 1e5
keys <- sprintf("key%05d", seq_len(n))
values <- rnorm(n)
# Prepare named list
lst <- setNames(as.list(values), keys)
# Prepare HashMap
hm <- rstruct::hashmap(lst)
print(hm)
print.Rcpp_rstruct_hashmap(hm)
getAnywhere("print.Rcpp_rstruct_hashmap")
View(hm)
hm@.xData
hm
hm$print()
print.Rcpp_rstruct_hashmap <- function(obj, ...) {
obj$print()
}
print(hm)
library(rstruct)
library(r2r)
library(microbenchmark)
library(ggplot2)
# parameters
n <- 1e5
keys <- sprintf("key%05d", seq_len(n))
values <- rnorm(n)
# Prepare named list
lst <- setNames(as.list(values), keys)
# Prepare HashMap
hm <- rstruct::hashmap(lst)
hm
print(hm)
hm$print()
print.Rcpp_rstruct_hashmap(hm)
library(rstruct)
library(r2r)
library(microbenchmark)
library(ggplot2)
# parameters
n <- 1e5
keys <- sprintf("key%05d", seq_len(n))
values <- rnorm(n)
# Prepare named list
lst <- setNames(as.list(values), keys)
# Prepare HashMap
hm <- rstruct::hashmap(lst)
print.Rcpp_rstruct_hashmap
library(rstruct)
library(r2r)
library(microbenchmark)
library(ggplot2)
# Benchmarks
# parameters
n <- 1e5
keys <- sprintf("key%05d", seq_len(n))
values <- rnorm(n)
# Prepare named list
lst <- setNames(as.list(values), keys)
# Prepare HashMap
hm <- rstruct::hashmap(lst)
hm
print(hm)
hm[["key97624"]]
hm[["key97624", "key97625"]]
hm["key97624"]
hm[c("key97624", "key97626")]
hm[c("key97624", "key97626", "does not exist")]
# prepare r2r-hashmap
hm_r2r <- r2r::hashmap()
for (i in seq_along(keys)) {
hm_r2r[[keys[i]]] <- values[i]
}
# Pick random keys for lookup
query_keys <- sample(keys, 1000)
bench_bulk_retrieve <- microbenchmark(
rstruct = {
hm[query_keys]
},
r2r = {
hm_r2r[query_keys]
},
named_list = {
lst[query_keys]
},
times = 50
)
bench_bulk_retrieve |> autoplot()
bench_random_lookup <- microbenchmark(
rstruct = {
hm$contains(sample(query_keys, 1))
},
r2r = {
hm_r2r[[sample(query_keys, 1)]]
},
named_list = {
lst[[sample(query_keys, 1)]]
},
times = 50
)
bench_random_lookup |> autoplot()
bench_random_lookup
?rstruct::hashmap
library(rstruct)
library(r2r)
library(microbenchmark)
library(ggplot2)
test <- rstruct::hashmap(
list(
"apple" = 1:3,
"cherry" = "red"
)
)
test
print(test)
test[["apple"]]
test[["banana"]] <- "yellow"
library(rstruct)
library(r2r)
library(microbenchmark)
library(ggplot2
)
test <- rstruct::hashmap(
list(
"apple" = 1:3,
"cherry" = "red"
)
)
test[["banana"]] <- "yellow"
print(test)
test <- rstruct::hashmap(
list(
"apple" = 1:3,
"cherry" = "red"
)
)
print(test)
test[["banana"]] <- "yellow"
print(test)
test <- rstruct::hashmap(
list(
"apple" = 1:3,
"cherry" = "red"
)
)
test$insert("banana", "yellow")
print(test)
library(rstruct)
library(r2r)
library(microbenchmark)
library(ggplot2)
test <- rstruct::hashmap(
list(
"apple" = 1:3,
"cherry" = "red"
)
)
test[["banana"]] <- "yellow"
print(test)
test[["banana"]] <- 1:5
print(test)
test <- rstruct::hashmap()
print(test)
library(rstruct)
library(r2r)
library(microbenchmark)
library(ggplot2)
test <- rstruct::hashmap(
list(
"apple" = 1:3,
"cherry" = "red"
)
)
test[["banana"]] <- 1:5
test[["banana"]]
test$banana
print(test)
test[["banana"]] <- data.frame(a = 1:5, b = 6:10)
test
print(test)
test[["banana"]]
library(rstruct)
library(r2r)
library(microbenchmark)
library(ggplot2)
test <- rstruct::hashmap(
list(
"apple" = 1:3,
"cherry" = "red"
)
)
class(test)
class(test) <- c("HashMap", class(test))
test <- rstruct::hashmap(
list(
"apple" = 1:3,
"cherry" = "red"
)
)
library(rstruct)
library(r2r)
library(microbenchmark)
library(ggplot2)
test <- rstruct::hashmap(
list(
"apple" = 1:3,
"cherry" = "red"
)
)
test[["banana"]] <- data.frame(a = 1:5, b = 6:10)
library(rstruct)
library(r2r)
library(microbenchmark)
library(ggplot2)
hm <- rstruct::hashmap(
list(
"apple" = 1:3,
"cherry" = "red"
)
)
hm[["apple"]]
hm[["banana"]] <- data.frame(a = 1:5, b = 6:10)
rm[["banana"]]
hm[["banana"]]
hm[c("apple", "cherry")]
hm[c("apple", "cherry", "does not exist")]
library(rstruct)
library(r2r)
library(microbenchmark)
library(ggplot2)
hm <- rstruct::hashmap(
list(
"apple" = 1:3,
"cherry" = "red"
)
)
hm[["apple"]]
hm[["banana"]] <- data.frame(a = 1:5, b = 6:10)
print(hm)
n <- 1e5
keys <- sprintf("key%05d", seq_len(n))
values <- rnorm(n)
# Prepare named list
lst <- setNames(as.list(values), keys)
# Prepare HashMap
hm <- rstruct::hashmap(lst)
# prepare r2r-hashmap
hm_r2r <- r2r::hashmap()
for (i in seq_along(keys)) {
hm_r2r[[keys[i]]] <- values[i]
}
# Pick random keys for lookup
query_keys <- sample(keys, 1000)
bench_bulk_retrieve <- microbenchmark(
rstruct = {
hm[query_keys]
},
r2r = {
hm_r2r[query_keys]
},
named_list = {
lst[query_keys]
},
times = 50
)
bench_bulk_retrieve |> autoplot()
bench_random_lookup <- microbenchmark(
rstruct = {
hm$contains(sample(query_keys, 1))
},
r2r = {
hm_r2r[[sample(query_keys, 1)]]
},
named_list = {
lst[[sample(query_keys, 1)]]
},
times = 50
)
bench_random_lookup |> autoplot()
bench_bulk_retrieve |> autoplot()
library(rstruct)
library(r2r)
library(microbenchmark)
library(ggplot2)
hm <- rstruct::hashmap(
list(
"apple" = 1:3,
"cherry" = "red"
)
)
hm[["apple"]]
hm[["banana"]] <- data.frame(a = 1:5, b = 6:10)
print(hm)
library(rstruct)
library(r2r)
library(microbenchmark)
library(ggplot2)
hm <- rstruct::hashmap(
list(
"apple" = 1:3,
"cherry" = "red"
)
)
hm[["apple"]]
hm[["banana"]] <- data.frame(a = 1:5, b = 6:10)
print(hm)
str(hm)
unclass(hm)
str(unclass(hm))
str(unclass(hm))$.xData
hm
bench_random_lookup <- microbenchmark(
rstruct = {
hm[[sample(query_keys, 1)]]
},
r2r = {
hm_r2r[[sample(query_keys, 1)]]
},
named_list = {
lst[[sample(query_keys, 1)]]
},
times = 50
)
n <- 1e5
keys <- sprintf("key%05d", seq_len(n))
values <- rnorm(n)
# Prepare named list
lst <- setNames(as.list(values), keys)
# Prepare HashMap
hm <- rstruct::hashmap(lst)
# prepare r2r-hashmap
hm_r2r <- r2r::hashmap()
for (i in seq_along(keys)) {
hm_r2r[[keys[i]]] <- values[i]
}
# Pick random keys for lookup
query_keys <- sample(keys, 1000)
bench_bulk_retrieve <- microbenchmark(
rstruct = {
hm[query_keys]
},
r2r = {
hm_r2r[query_keys]
},
named_list = {
lst[query_keys]
},
times = 50
)
bench_bulk_retrieve |> autoplot()
bench_random_lookup <- microbenchmark(
rstruct = {
hm[[sample(query_keys, 1)]]
},
r2r = {
hm_r2r[[sample(query_keys, 1)]]
},
named_list = {
lst[[sample(query_keys, 1)]]
},
times = 50
)
bench_random_lookup |> autoplot()
bench_random_lookup <- microbenchmark(
rstruct_logical = {
hm$contains(sample(query_keys, 1))
},
rstruct_object = {
hm[[sample(query_keys, 1)]]
}
r2r = {
bench_random_lookup <- microbenchmark(
rstruct_logical = {
hm$contains(sample(query_keys, 1))
},
rstruct_object = {
hm[[sample(query_keys, 1)]]
},
r2r = {
hm_r2r[[sample(query_keys, 1)]]
},
named_list = {
lst[[sample(query_keys, 1)]]
},
times = 50
)
bench_random_lookup |> autoplot()
bench_random_lookup <- microbenchmark(
`rstruct (membership test)` = {
hm$contains(sample(query_keys, 1))
},
`rstruct (retrieval)` = {
hm[[sample(query_keys, 1)]]
},
r2r = {
hm_r2r[[sample(query_keys, 1)]]
},
named_list = {
lst[[sample(query_keys, 1)]]
},
times = 50
)
bench_random_lookup |> autoplot()
bench_random_lookup <- microbenchmark(
`rstruct (membership test)` = {
hm$contains(sample(query_keys, 1))
},
`rstruct (retrieval)` = {
hm[[sample(query_keys, 1)]]
},
r2r = {
hm_r2r[[sample(query_keys, 1)]]
},
`Named List` = {
lst[[sample(query_keys, 1)]]
},
times = 50
)
bench_random_lookup |> autoplot()
bench_bulk_retrieve <- microbenchmark(
rstruct = {
hm[query_keys]
},
r2r = {
hm_r2r[query_keys]
},
`Named List` = {
lst[query_keys]
},
times = 50
)
bench_bulk_retrieve |> autoplot()
bench_bulk_retrieve |> autoplot() + labs(title = "Bulk retrieval")
bench_random_lookup |> autoplot() + labs(title = "Random lookup")
bench_bulk_retrieve |> autoplot() + labs(title = "Bulk retrieval")
library(rstruct)
library(r2r)
library(microbenchmark)
library(ggplot2)
# Benchmarks
# parameters
n <- 1e5
keys <- sprintf("key%05d", seq_len(n))
values <- rnorm(n)
digest::digest(n, "xxhash32")
digest::digest(n, "xxhash32")
digest::digest(n, "xxhash32")
digest::digest(keys, "xxhash32")
digest::digest(values, "xxhash32")
digest::digest
library(rstruct)
library(r2r)
library(microbenchmark)
library(ggplot2)
hm <- rstruct::hashmap(
list(
"apple" = 1:3,
"cherry" = "red"
)
)
hm[["apple"]]
hm[["banana"]] <- data.frame(a = 1:5, b = 6:10)
hm <- rstruct::hashmap(
list(
"apple" = 1:3,
"cherry" = "red"
)
)
hm[["apple"]]
hm[["banana"]] <- data.frame(a = 1:5, b = 6:10)
hm
print(hm)
hm[["banana"]] <- "yellow"
hs <- new(HashSet)
new(rstruct_hashset)
new(rstruct::rstruct_hashset)
library(rstruct)
library(r2r)
library(microbenchmark)
library(ggplot2)
hm <- rstruct::hashmap(
list(
"apple" = 1:3,
"cherry" = "red"
)
)
hm[["apple"]]
hm[["banana"]] <- data.frame(a = 1:5, b = 6:10)
print(hm)
hs <- rstruct::hashset(list("apple", "banana", "cherry"))
setwd("~/Projects/rstruct/")
